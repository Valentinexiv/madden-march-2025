---
description: Follow these rules for all requests.
globs: 
alwaysApply: true
---

# Project Instructions

Use specification and guidelines as you build the app.

Write the complete code for every step. Do not get lazy.

Your goal is to completely finish whatever I ask for.

You will see <ai_context> tags in the code. These are context tags that you should use to help you understand the codebase.

## Overview

- This is a web app template.
- Find the steps in [project-steps.md](mdc:project-steps.md)
- Work on whatever step(s) I tell you to work on and only work on those steps at once
- Once steps are done, mark as completed
- Ten stop, I will give you further instructions

## Tech Stack

- Frontend: Next.js, Tailwind, Shadcn, Framer Motion
- Backend: Postgres, Supabase, Drizzle ORM, Server Actions
- Auth: Supabase
- Payments: Stripe
- Analytics: PostHog
- Deployment: Vercel

## Project Structure

- `actions` - Server actions
  - `db` - Database related actions
  - Other actions
- `app` - Next.js app router
  - `api` - API routes
  - `route` - An example route
    - `_components` - One-off components for the route
    - `layout.tsx` - Layout for the route
    - `page.tsx` - Page for the route
- `components` - Shared components
  - `ui` - UI components
  - `utilities` - Utility components
- `db` - Database
  - `schema` - Database schemas
- `lib` - Library code
  - `hooks` - Custom hooks
- `prompts` - Prompt files
- `public` - Static assets
- `types` - Type definitions

## Rules

Follow these rules when building the app.

Core Purpose: Create a dashboard that visualizes Madden franchise data and integrates with Discord communities
Data Flow: Madden Companion App → API → Database → UI
Primary Users: Madden franchise commissioners and players who want to track league data

Development Workflow

Work on steps from the Implementation Plan in sequence
Complete one full step before moving to the next
Explain your implementation approach before writing code
Write complete code for every implementation, not just snippets
Mark tasks as completed using - [x] notation when finished
Stop after completing assigned steps for further instructions

Code Standards

Use TypeScript with proper typing throughout the project
Implement comprehensive error handling for all API routes and database operations
Add comments to explain complex logic
Follow consistent naming convention (kebab-case for files and folders)
Structure API routes to exactly match Madden Companion App expectations
Keep the database schema structure in mind for all operations

Technical Requirements

API Constraints:

Madden Companion App sends POST requests with JSON data
API routes must handle different data types with specific structure
User authentication must be verified for all API operations


Database Requirements:

Follow the database schema strictly for all operations
Optimize for read performance as data visualization is primary


UI/UX Guidelines:

Design for both mobile and desktop experiences
Focus on data visualization and readability
Create intuitive navigation between different data views
Provide clear instructions for Madden Companion App integration
Use NFL-inspired design elements (without copyright issues)



Project Structure

src/actions - Server actions for database and other operations
src/app - Next.js app router with routes, layouts, and page components
src/components - Shared components including UI and utility components
src/db - Database connection and schema definitions
src/lib - Library code including hooks and utilities
src/types - Type definitions for the application

Import & File Conventions

Use @ to import from the app root (e.g., @/components/ui/button)
Use kebab-case for all files and folders unless otherwise specified
Don't update shadcn components unless explicitly instructed
When importing types, use @/types
Export all types in types/index.ts

Environment Variables

Store all environment variables in .env.local
Update .env.example when adding new variables
Use NEXT_PUBLIC_ prefix only for variables accessed in client components
For server-side code, access variables with process.env.VARIABLE_NAME

Database Operations

Keep the schema.ts structure in mind for all database operations
Use Drizzle ORM for database interactions
Implement proper transaction handling for data integrity
Follow the database schema provided in the project

Madden-Specific Requirements

API routes must exactly match Madden Companion App expectations
Process different types of data (teams, players, stats, schedules)
Handle various JSON structures from the Companion App
Store and visualize comprehensive league, team, and player statistics

Remember to maintain constant awareness of the project's purpose: creating a seamless dashboard for Madden franchise players to visualize their data and receive Discord notifications about league events.
```